syntax = "proto3";

package ember_agents_onchain.v1;

import "google/protobuf/timestamp.proto";

// The DataService provides information about chains and tokens.
//
// Possible gRPC error codes for these methods:
// - INVALID_ARGUMENT: The request parameters are malformed or invalid.
// - NOT_FOUND: The requested resource(s) could not be found.
// - INTERNAL: An unexpected server-side error occurred.
// - UNAUTHENTICATED / PERMISSION_DENIED: If authentication or authorization fails.
//
service DataService {
  // Returns a list of supported chains.
  // Error codes:
  //   - INVALID_ARGUMENT if filtering or pagination parameters are invalid.
  //   - INTERNAL for server-side issues.
  rpc GetChains(GetChainsRequest) returns (GetChainsResponse) {}

  // Returns a list of tokens (potentially filtered by chain or other criteria).
  // Error codes:
  //   - INVALID_ARGUMENT if filtering or pagination parameters are invalid.
  //   - NOT_FOUND if no tokens match the request.
  //   - INTERNAL for server-side issues.
  rpc GetTokens(GetTokensRequest) returns (GetTokensResponse) {}

  // Returns a list of capabilities filtered by capability type.
  // Error codes:
  //   - INVALID_ARGUMENT if request parameters are invalid.
  //   - INTERNAL for server-side issues.
  rpc GetCapabilities(GetCapabilitiesRequest) returns (GetCapabilitiesResponse) {}
}

// New service for wallet context details. This groups queries related to a wallet's positions and balances.
service WalletContext {
  // Gets wallet positions for a given wallet address.
  // Currently returns borrow positions; will be extended to include vault positions, lending positions, and token balances in the future.
  rpc GetWalletPositions(GetWalletPositionsRequest) returns (GetWalletPositionsResponse) {}
}

// New service for transaction creation
service CreateTransaction {
  // Creates a transaction for swapping tokens.
  // Error codes:
  //   - INVALID_ARGUMENT if the request parameters are invalid
  //   - NOT_FOUND if tokens or chain cannot be found
  //   - INTERNAL for server-side issues
  //   - FAILED_PRECONDITION if the swap is not possible
  rpc SwapTokens(SwapTokensRequest) returns (SwapTokensResponse) {}

  // Creates a transaction for borrowing tokens.
  // Error codes:
  //   - INVALID_ARGUMENT if the request parameters are invalid
  //   - NOT_FOUND if token or chain cannot be found
  //   - INTERNAL for server-side issues
  //   - FAILED_PRECONDITION if the borrowing transaction is not possible
  rpc BorrowTokens(BorrowTokensRequest) returns (BorrowTokensResponse) {}
  rpc RepayTokens(RepayTokensRequest) returns (RepayTokensResponse) {}
  rpc SupplyTokens(SupplyTokensRequest) returns (SupplyTokensResponse) {}

  // Added RPC for withdrawing tokens (removing or retrieving lent tokens)
  // Error codes:
  //   - INVALID_ARGUMENT if the request parameters are invalid
  //   - NOT_FOUND if token or chain cannot be found
  //   - INTERNAL for server-side issues
  //   - FAILED_PRECONDITION if the withdrawal is not possible (e.g., insufficient balance)
  rpc WithdrawTokens(WithdrawTokensRequest) returns (WithdrawTokensResponse) {}
}

// New service for transaction execution
service TransactionExecution {
  // Gets the tracking status of a transaction
  // Error codes:
  //   - INVALID_ARGUMENT if request parameters are invalid
  //   - NOT_FOUND if the transaction cannot be found
  //   - INTERNAL for server-side issues
  rpc GetProviderTrackingStatus(GetProviderTrackingStatusRequest) returns (GetProviderTrackingStatusResponse);
}

// -----------------------------------------------------------------------------
// Capability definitions
// -----------------------------------------------------------------------------

enum CapabilityType {
  CAPABILITY_TYPE_UNSPECIFIED = 0;
  SWAP = 1;
  LENDING = 2;
}

// Define distinct messages for each capability.

message SwapCapability {
  string capability_id = 1;
  repeated Token supported_tokens = 2;
}

message LendingCapability {
  string capability_id = 1;
  string current_supply_apy = 2;
  string current_borrow_apy = 3;
  Token underlying_token = 4;
  string max_ltv = 5;  // Maximum Loan-to-Value ratio for this lending/supply capability
  string liquidation_threshold = 6;  // Liquidation threshold for the borrowed asset
}

// The Capability wrapper uses a oneof to capture exactly one of the distinct types.
message Capability {
  oneof capability_detail {
    SwapCapability swap_capability = 1;
    LendingCapability lending_capability = 2;
  }
}

// Request to get capabilities, filtered by the type and paginated.
message GetCapabilitiesRequest {
  CapabilityType type = 1;
}

// Response containing the list of capabilities, with pagination token.
message GetCapabilitiesResponse {
  repeated Capability capabilities = 1;
}

// -----------------------------------------------------------------------------
// Chain, Token, and Transaction Definitions (unchanged)
// -----------------------------------------------------------------------------

// Chain type enum
enum ChainType {
  UNSPECIFIED = 0;
  EVM = 1;
  SOLANA = 2;
  COSMOS = 3;
}

message Chain {
  string chain_id = 1;
  ChainType type = 2;
  string icon_uri = 3;
  Token native_token = 4;
  string http_rpc_url = 5;
  string name = 6;
  repeated string block_explorer_urls = 7;

  // Timestamps
  optional google.protobuf.Timestamp updated_at = 8;
}

message Token {
  // For native tokens, this may be empty.
  TokenIdentifier token_uid = 1;
  string name = 2;
  string symbol = 3;
  bool is_native = 4;
  int32 decimals = 5;
  optional string icon_uri = 6;

  // Store as a string to avoid floating-point precision issues.
  // e.g., "123.456789"
  optional string usd_price = 7;

  bool is_vetted = 8;

  // Timestamps
  optional google.protobuf.Timestamp updated_at = 9;
}

// Request to get chains, with optional filtering/pagination.
message GetChainsRequest {
  string filter = 1;
}

message GetChainsResponse {
  repeated Chain chains = 1;
}

// Request to get tokens, with optional filter by chain_id, plus pagination.
message GetTokensRequest {
  // If empty, returns tokens across all chains.
  string chain_id = 1;
  string filter = 2;
}

message GetTokensResponse {
  repeated Token tokens = 1;
}

// Order type for token swaps
enum OrderType {
  ORDER_TYPE_UNSPECIFIED = 0;
  MARKET_BUY = 1;
  MARKET_SELL = 2;
  LIMIT_BUY = 3;
  LIMIT_SELL = 4;
}

// Identifies a token on a specific chain
message TokenIdentifier {
  string chain_id = 1; // TODO: use number
  string address = 2;
}

// Status of the transaction plan creation
enum TransactionPlanStatus {
  TRANSACTION_PLAN_STATUS_UNSPECIFIED = 0;
  SUCCESS = 1;  // Valid transaction data was created
  ERROR = 2;    // Failed to create valid transaction data
}

// Request to swap tokens
message SwapTokensRequest {
  OrderType order_type = 1;
  TokenIdentifier base_token = 2;
  TokenIdentifier quote_token = 3;
  string amount = 4;
  optional string limit_price = 5;
  optional string slippage_tolerance = 6;
  optional string expiration = 7;  // Changed from deadline
  string recipient = 8;
}

// Error details when transaction plan creation fails
message TransactionPlanError {
  string code = 1;        // e.g., "INSUFFICIENT_LIQUIDITY"
  string message = 2;     // Human-readable error message
  map<string, string> details = 3;  // Additional context about the error
}

// Response containing the swap details
message SwapTokensResponse {
  TransactionPlanStatus status = 1;  // Changed from SwapStatus
  OrderType order_type = 2;

  // Echo back the token details
  TokenIdentifier base_token = 3;
  TokenIdentifier quote_token = 4;

  // Fee and transaction details
  optional FeeBreakdown fee_breakdown = 5;
  optional TransactionPlan transaction_plan = 6;
  optional SwapEstimation estimation = 7;

  // Tracking information from the provider
  optional ProviderTrackingInfo provider_tracking = 8;

  // Error details if status is ERROR
  optional TransactionPlanError error = 9;  // Changed from SwapError
}

// Transaction type for different chains
enum TransactionType {
  TRANSACTION_TYPE_UNSPECIFIED = 0;
  EVM_TX = 1;
  SOLANA_TX = 2;
  COSMOS_TX = 3;
}

// Fee breakdown for the swap
message FeeBreakdown {
  string service_fee = 1;
  string slippage_cost = 2;
  string total = 3;
  string fee_denomination = 4;
}

// Chain-specific transaction plan
message TransactionPlan {
  TransactionType type = 1;
  string to = 2;
  string data = 3;
  string value = 4;
}

// Estimation details for the swap
message SwapEstimation {
  string base_token_delta = 1;
  string quote_token_delta = 2;
  string effective_price = 3;
  string time_estimate = 4;
  string expiration = 5;
}

// Tracking information from the provider
message ProviderTrackingInfo {
  string request_id = 1;
  string provider_name = 2;
  string explorer_url = 3;
}

// New messages for provider tracking status
enum ProviderStatus {
  PROVIDER_STATUS_UNSPECIFIED = 0;
  PROVIDER_STATUS_SUCCESS = 1;
  PROVIDER_STATUS_PARTIAL_SUCCESS = 2;
  PROVIDER_STATUS_NEEDS_GAS = 3;
  PROVIDER_STATUS_NOT_FOUND = 4;
  PROVIDER_STATUS_ONGOING = 5;
}

message GetProviderTrackingStatusRequest {
  string request_id = 1;
  string transaction_id = 2;
}

message ProviderTrackingStatus {
  string request_id = 1;
  string transaction_id = 2;
  string provider_name = 3;
  string explorer_url = 4;
  ProviderStatus status = 5;
}

message GetProviderTrackingStatusResponse {
  ProviderTrackingStatus tracking_status = 1;
}

// Request to borrow tokens.
message BorrowTokensRequest {
  TokenIdentifier token_uid = 2;
  string amount = 3;
  string borrower_wallet_address = 4;
}

// Response containing the borrow transaction details.
message BorrowTokensResponse {
  string current_borrow_apy = 1;
  string liquidation_threshold = 2;
  optional FeeBreakdown fee_breakdown = 3;
  repeated TransactionPlan transactions = 4;
  TransactionPlanError error = 5;
}

// -----------------------------------------------------------------------------
// Wallet Context Definitions
// -----------------------------------------------------------------------------

// Request for wallet positions, with pagination support.
message GetWalletPositionsRequest {
  string wallet_address = 1;
}

// Response containing the list of wallet positions.
message GetWalletPositionsResponse {
  repeated WalletPosition positions = 1;
}

// A wrapper message that uses oneof to represent a wallet position of a specific type.
message WalletPosition {
  oneof position_detail {
    LendingPosition lending_position = 1;
    // Future extensions: VaultPosition vault_position = 2;
    //                   TokenBalance token_balance = 3;
  }
}

// Represents details of a borrow position. This mirrors the schema defined in borrowAdapter.ts.
message BorrowPosition {
  // Wallet address of the borrower.
  string borrower_wallet_address = 1;
  // Total liquidity available in USD.
  string total_liquidity_usd = 2;
  // Total collateral value in USD.
  string total_collateral_usd = 3;
  // Total amount borrowed in USD.
  string total_borrows_usd = 4;
  // Net worth calculated as collateral minus borrows in USD.
  string net_worth_usd = 5;
  // Health factor of the borrow position.
  string health_factor = 6;
  // Detailed positions for each token in the borrow position.
  repeated TokenPosition positions = 7;
}

// Represents a token position within a wallet's borrow position.
message TokenPosition {
  // The underlying asset for this token position.
  Token underlying_token = 1;
  // Borrow rate for this token, if applicable.
  string borrow_rate = 2;
  // Supply balance for this token (if supplied as collateral).
  string supply_balance = 3;
  // Borrow balance for this token.
  string borrow_balance = 4;
  // Combined USD value of this position.
  string value_usd = 5;
}

// New message definitions for lending positions
message LendingPosition {
  repeated LendTokenDetail user_reserves = 1;
  string total_liquidity_usd = 2;
  string total_collateral_usd = 3;
  string total_borrows_usd = 4;
  string net_worth_usd = 5;
  string available_borrows_usd = 6;
  string current_loan_to_value = 7;
  string current_liquidation_threshold = 8;
  string health_factor = 9;
}

message LendTokenDetail {
  Token token = 1;
  string underlying_balance = 2;
  string underlying_balance_usd = 3;
  string variable_borrows = 4;
  string variable_borrows_usd = 5;
  string total_borrows = 6;
  string total_borrows_usd = 7;
}

message RepayTokensRequest {
  TokenIdentifier token_uid = 2;
  string amount = 3;
  string borrower_wallet_address = 4;
}

message RepayTokensResponse {
  TokenIdentifier token_uid = 2;
  string amount = 3;
  string borrower_wallet_address = 4;
  optional FeeBreakdown fee_breakdown = 5;
  repeated TransactionPlan transactions = 6;
  optional TransactionPlanError error = 7;
}

message SupplyTokensRequest {
  TokenIdentifier token_uid = 2;
  string amount = 3;
  string supplier_wallet_address = 4;
}

message SupplyTokensResponse {
  TokenIdentifier token_uid = 2;
  string amount = 3;
  string supplier_wallet_address = 4;
  optional FeeBreakdown fee_breakdown = 5;
  repeated TransactionPlan transactions = 6;
  optional TransactionPlanError error = 7;
}

// New message definitions for withdraw operations:
message WithdrawTokensRequest {
  TokenIdentifier token_uid = 2;
  string amount = 3;
  string lender_wallet_address = 4;
}

message WithdrawTokensResponse {
  TokenIdentifier token_uid = 2;
  string amount = 3;
  string lender_wallet_address = 4;
  optional FeeBreakdown fee_breakdown = 5;
  repeated TransactionPlan transactions = 6;
  optional TransactionPlanError error = 7;
}

message GetLendingUserSummaryRequest {
  string user_address = 1;
}

message LendingReserve {
  TokenIdentifier token_uid = 1;
  string symbol = 2;
  int32 decimals = 3;
  string supply_rate = 4;
  string borrow_rate = 5;
  string reserve_factor = 6;
  string reserve_liquidation_threshold = 7;
}

message GetLendingReservesResponse {
  repeated LendingReserve reserves = 1;
}
